{
  "address": "0x358bFdf9A2e6405E9f14A03DaAFAE9a2cbd1Dd46",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c2df509c559a3797367b104132e33cbe04f6127886899c76b68867d05aeb5b2",
  "receipt": {
    "to": null,
    "from": "0x054f3B1d8b5Cd8Ad7f32dD519Fe24779B48c21b0",
    "contractAddress": "0x358bFdf9A2e6405E9f14A03DaAFAE9a2cbd1Dd46",
    "transactionIndex": 55,
    "gasUsed": "834730",
    "logsBloom": "0x
    "blockHash": "0x6244344629b2e4f66756c40eb0d32b1f9b9de020a9b1e3aac1f1b80c52ef7275",
    "transactionHash": "0x3c2df509c559a3797367b104132e33cbe04f6127886899c76b68867d05aeb5b2",
    "logs": [],
    "blockNumber": 5342704,
    "cumulativeGasUsed": "4442874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x694AA1769357215DE4FAC081bf1f309aDC325306"
  ],
  "numDeployments": 1,
  "solcInputHash": "affdfefa32368619a20dc75d0abe8357",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address public /* immutable */ i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface public priceFeed;\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n    \\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n    \\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\ \\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback() \\n    //     /   \\\\ \\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n}\\n\",\"keccak256\":\"0xcf6dd16b3038599c028e890df869da07414e986ad303f3deb7a4658ba19b05d5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xc4b95eb73437578556f0ceb88f3347d60ed562dd86d33bc874ca276a0204706a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610ea5380380610ea58339818101604052810190610032919061011d565b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061014a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b600060208284031215610133576101326100ba565b5b600061014184828501610108565b91505092915050565b610d4c806101596000396000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a6565b61051f565b6040516100d891906107ec565b60405180910390f35b3480156100ed57600080fd5b506100f6610537565b60405161010391906107ec565b60405180910390f35b34801561011857600080fd5b50610121610544565b60405161012e9190610866565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056a565b6040516101639190610890565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d7565b610590565b6040516101a09190610890565b60405180910390f35b6802b5e3af16b18800006101e8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cf90919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610961565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109b0565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040f576000600182815481106103905761038f6109e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061036d565b50600067ffffffffffffffff81111561042b5761042a610a13565b5b6040519080825280602002602001820160405280156104595781602001602082028036833780820191505090505b506001908051906020019061046f92919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049690610a73565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b505090508061051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390610ad4565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181815481106105a057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105db8361060b565b90506000670de0b6b3a764000085836105f49190610af4565b6105fe9190610b65565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610c23565b5050509150506402540be400816106949190610c9e565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077382610748565b9050919050565b61078381610768565b811461078e57600080fd5b50565b6000813590506107a08161077a565b92915050565b6000602082840312156107bc576107bb610743565b5b60006107ca84828501610791565b91505092915050565b6000819050919050565b6107e6816107d3565b82525050565b600060208201905061080160008301846107dd565b92915050565b6000819050919050565b600061082c61082761082284610748565b610807565b610748565b9050919050565b600061083e82610811565b9050919050565b600061085082610833565b9050919050565b61086081610845565b82525050565b600060208201905061087b6000830184610857565b92915050565b61088a81610768565b82525050565b60006020820190506108a56000830184610881565b92915050565b6108b4816107d3565b81146108bf57600080fd5b50565b6000813590506108d1816108ab565b92915050565b6000602082840312156108ed576108ec610743565b5b60006108fb848285016108c2565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061094b601b83610904565b915061095682610915565b602082019050919050565b6000602082019050818103600083015261097a8161093e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109bb826107d3565b91506109c6836107d3565b92508282019050808211156109de576109dd610981565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5d600083610a42565b9150610a6882610a4d565b600082019050919050565b6000610a7e82610a50565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610abe600b83610904565b9150610ac982610a88565b602082019050919050565b60006020820190508181036000830152610aed81610ab1565b9050919050565b6000610aff826107d3565b9150610b0a836107d3565b9250828202610b18816107d3565b91508282048414831517610b2f57610b2e610981565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b70826107d3565b9150610b7b836107d3565b925082610b8b57610b8a610b36565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb581610b96565b8114610bc057600080fd5b50565b600081519050610bd281610bac565b92915050565b6000819050919050565b610beb81610bd8565b8114610bf657600080fd5b50565b600081519050610c0881610be2565b92915050565b600081519050610c1d816108ab565b92915050565b600080600080600060a08688031215610c3f57610c3e610743565b5b6000610c4d88828901610bc3565b9550506020610c5e88828901610bf9565b9450506040610c6f88828901610c0e565b9350506060610c8088828901610c0e565b9250506080610c9188828901610bc3565b9150509295509295909350565b6000610ca982610bd8565b9150610cb483610bd8565b9250828202610cc281610bd8565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfa57610cf9610981565b5b8282058414831517610d0f57610d0e610981565b5b509291505056fea2646970667358221220e2612346482c5961241b974ca2fff1b9a9aad3448e653b51c257e914b38e0da464736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107a6565b61051f565b6040516100d891906107ec565b60405180910390f35b3480156100ed57600080fd5b506100f6610537565b60405161010391906107ec565b60405180910390f35b34801561011857600080fd5b50610121610544565b60405161012e9190610866565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b5061015661056a565b6040516101639190610890565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108d7565b610590565b6040516101a09190610890565b60405180910390f35b6802b5e3af16b18800006101e8600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105cf90919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610961565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461027791906109b0565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036a576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561040f576000600182815481106103905761038f6109e4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808060010191505061036d565b50600067ffffffffffffffff81111561042b5761042a610a13565b5b6040519080825280602002602001820160405280156104595781602001602082028036833780820191505090505b506001908051906020019061046f92919061069c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049690610a73565b60006040518083038185875af1925050503d80600081146104d3576040519150601f19603f3d011682016040523d82523d6000602084013e6104d8565b606091505b505090508061051c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051390610ad4565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600181815481106105a057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105db8361060b565b90506000670de0b6b3a764000085836105f49190610af4565b6105fe9190610b65565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190610c23565b5050509150506402540be400816106949190610c9e565b915050919050565b828054828255906000526020600020908101928215610715579160200282015b828111156107145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106bc565b5b5090506107229190610726565b5090565b5b8082111561073f576000816000905550600101610727565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077382610748565b9050919050565b61078381610768565b811461078e57600080fd5b50565b6000813590506107a08161077a565b92915050565b6000602082840312156107bc576107bb610743565b5b60006107ca84828501610791565b91505092915050565b6000819050919050565b6107e6816107d3565b82525050565b600060208201905061080160008301846107dd565b92915050565b6000819050919050565b600061082c61082761082284610748565b610807565b610748565b9050919050565b600061083e82610811565b9050919050565b600061085082610833565b9050919050565b61086081610845565b82525050565b600060208201905061087b6000830184610857565b92915050565b61088a81610768565b82525050565b60006020820190506108a56000830184610881565b92915050565b6108b4816107d3565b81146108bf57600080fd5b50565b6000813590506108d1816108ab565b92915050565b6000602082840312156108ed576108ec610743565b5b60006108fb848285016108c2565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061094b601b83610904565b915061095682610915565b602082019050919050565b6000602082019050818103600083015261097a8161093e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109bb826107d3565b91506109c6836107d3565b92508282019050808211156109de576109dd610981565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610a5d600083610a42565b9150610a6882610a4d565b600082019050919050565b6000610a7e82610a50565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610abe600b83610904565b9150610ac982610a88565b602082019050919050565b60006020820190508181036000830152610aed81610ab1565b9050919050565b6000610aff826107d3565b9150610b0a836107d3565b9250828202610b18816107d3565b91508282048414831517610b2f57610b2e610981565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b70826107d3565b9150610b7b836107d3565b925082610b8b57610b8a610b36565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610bb581610b96565b8114610bc057600080fd5b50565b600081519050610bd281610bac565b92915050565b6000819050919050565b610beb81610bd8565b8114610bf657600080fd5b50565b600081519050610c0881610be2565b92915050565b600081519050610c1d816108ab565b92915050565b600080600080600060a08688031215610c3f57610c3e610743565b5b6000610c4d88828901610bc3565b9550506020610c5e88828901610bf9565b9450506040610c6f88828901610c0e565b9350506060610c8088828901610c0e565b9250506080610c9188828901610bc3565b9150509295509295909350565b6000610ca982610bd8565b9150610cb483610bd8565b9250828202610cc281610bd8565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610cfa57610cf9610981565b5b8282058414831517610d0f57610d0e610981565b5b509291505056fea2646970667358221220e2612346482c5961241b974ca2fff1b9a9aad3448e653b51c257e914b38e0da464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "i_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 73,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}